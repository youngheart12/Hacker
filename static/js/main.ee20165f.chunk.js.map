{"version":3,"sources":["container/listOfSpeech/childOfSpeech/childOfSpeech.js","container/listOfSpeech/listofSppech.js","container/Speech/speech.js","component/Layout/layout.js","App.js","serviceWorker.js","index.js"],"names":["childOfSpeech","props","Container","fluid","Row","Col","sm","md","xs","Card","CardHeader","authorName","CardBody","CardTitle","style","textDecoration","CardSubtitle","CardText","authorSpeech","Button","color","onClick","editButton","float","deleteButton","CardFooter","tokenize","listofSppech","state","speechDetails","isModal","editKey","editAuthorName","editAuthorSpeech","editTokenize","toggleHandler","setState","setData","data","speechDetail","deleteHandler","key","a","splice","editHandler","stringTokeinze","toString","submitHandler","e","preventDefault","split","copySpeechDetails","editOnChangeHandler","target","name","value","this","prevProps","nextProps","padding","map","speech","tags","margin","bind","Modal","isOpen","toggle","ModalHeader","ModalBody","Form","FormGroup","row","Input","type","placeholder","defaultValue","onChange","ModalFooter","toggleDetailsForm","Component","authorSpeechTag","turnButton","filterVlaueAuthor","setFilterValueHandler","filterValue","document","getElementById","filter","toLocaleLowerCase","onChangeHandler","isButtonDisabled","clearInputHandler","push","length","backgroundColor","InputGroup","id","bsSize","InputGroupAddon","addonType","block","outline","disabled","layout","className","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee20165f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Row,Col,Container, Button, Card, CardText, CardBody,\r\n    CardTitle, CardSubtitle, CardHeader, CardFooter} from 'reactstrap';\r\nimport './childOfSpeech.css';\r\nconst childOfSpeech=(props)=>\r\n{\r\nreturn(\r\n    <Container fluid>\r\n        <Row>\r\n            <Col sm=\"12\" md=\"12\" xs=\"12\">\r\n            <Card>\r\n     <CardHeader><h4>Author Name:{props.authorName}</h4></CardHeader>\r\n        <CardBody>\r\n          <CardTitle><h6 style={{textDecoration:\"underline\"}}>Speech</h6></CardTitle>\r\n          <CardSubtitle> Speech details</CardSubtitle>\r\n          <CardText>{props.authorSpeech}</CardText>\r\n          <Button color=\"info\" onClick={props.editButton}>Edit</Button>\r\n          <Button color=\"danger\" style={{float:\"right\"}} onClick={props.deleteButton}> Delete</Button>\r\n        </CardBody>\r\n        <CardFooter><h5>Tags:{props.tokenize}</h5></CardFooter>\r\n      </Card>\r\n            </Col>\r\n        </Row>\r\n        <br></br>\r\n    </Container>\r\n)\r\n}\r\nexport default childOfSpeech;","import React, { Component } from 'react'\r\nimport ChildSpeech from './childOfSpeech/childOfSpeech';\r\nimport {Col,Modal,ModalBody,ModalHeader,Form,FormGroup,ModalFooter,Input,Button} from 'reactstrap'\r\nexport default class listofSppech extends Component {\r\n   state={\r\n       speechDetails:[],\r\n       isModal:false,\r\n       editKey:null,\r\n       editAuthorName:null,\r\n       editAuthorSpeech:null,\r\n       editTokenize:null\r\n      \r\n   }\r\n   componentDidMount()\r\n   {\r\n       this.setData();\r\n   }\r\n\r\n   componentDidUpdate(prevProps,nextProps)\r\n   {\r\n        if(prevProps.speechDetails!==this.props.speechDetails)\r\n        {\r\n            this.setData();\r\n        }\r\n   }\r\n\r\n   toggleHandler=()=>{\r\n       this.setState({isModal:!this.state.isModal})\r\n   }\r\n\r\n   setData=()=>{\r\n       const data=this.props.speechDetail;\r\n       this.setState({\r\n           speechDetails:data\r\n       })\r\n   }\r\n \r\ndeleteHandler=(key)=>{\r\n    var a=this.state.speechDetails;\r\n    a.splice(key,1);\r\n    this.setState({\r\n        speechDetail:a,\r\n        \r\n    })\r\n}\r\n\r\neditHandler=(key)=>{\r\n    let {authorName,authorSpeech,tokenize}=this.props.speechDetail[key];\r\n   const stringTokeinze=tokenize.toString();\r\n    this.setState({\r\n        editAuthorName:authorName,\r\n        editAuthorSpeech:authorSpeech,\r\n        editTokenize:stringTokeinze,\r\n        isModal:true,\r\n        editKey:key\r\n    })\r\n    \r\n}\r\n\r\nsubmitHandler=(e)=>{\r\n    e.preventDefault();\r\n    const {editAuthorName,editAuthorSpeech,editTokenize,editKey}=this.state;\r\nconst Tokenize=editTokenize.split(\",\");\r\n    const data={\r\n        authorName:editAuthorName,\r\n        authorSpeech:editAuthorSpeech,\r\n        tokenize:Tokenize\r\n    \r\n    }\r\n \r\n var copySpeechDetails=this.state.speechDetails;\r\n copySpeechDetails[editKey]=data;\r\n\r\n this.setState({\r\n     speechDetails:copySpeechDetails,\r\n     isModal:!this.state.isModal\r\n })\r\n\r\n}\r\n\r\n\r\neditOnChangeHandler=(e)=>{\r\n    this.setState({\r\n    [e.target.name]:e.target.value\r\n    })\r\n}\r\n    \r\n\r\nrender() {\r\n    return (\r\n           \r\n            <Col md=\"12\" xs=\"12\" sm=\"12\" style={{padding:\"0px\"}}>\r\n{this.props.speechDetail.map((speech,key)=>{\r\n    return <ChildSpeech authorName={speech.authorName}\r\n    authorSpeech={speech.authorSpeech}\r\n    tokenize={speech.tokenize.map((tags)=>{\r\n        return <Button color=\"danger\" style={{margin:\"5px\"}}>{tags}</Button>\r\n    })}\r\n    deleteButton={this.deleteHandler.bind(this,key)}\r\n    editButton={this.editHandler.bind(this,key)}\r\n    ></ChildSpeech>\r\n})}\r\n <div>\r\n                     <Modal isOpen={this.state.isModal} toggle={this.toggleHandler} >\r\n        <ModalHeader toggle={this.toggleHandler}>Edit this speech</ModalHeader>\r\n        <ModalBody style={{padding:\"25px\",color:\"black\"}}>\r\n        <Form >\r\n      <FormGroup row>\r\n        <Col  style={{padding:\"5px\"}}>\r\n          <Input type=\"text\" name=\"editAuthorName\"  placeholder=\"Enter Author Name\" defaultValue={this.state.editAuthorName} onChange={this.editOnChangeHandler} />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup row>\r\n      <Col  style={{padding:\"5px\"}}>\r\n          <Input type=\"textarea\" name=\"editAuthorSpeech\"  placeholder=\"Enter the text of Speech \" defaultValue={this.state.editAuthorSpeech} onChange={this.editOnChangeHandler}  />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup row>\r\n      <Col style={{padding:\"5px\"}}>\r\n          <Input type=\"text\" name=\"editTokenize\"  placeholder=\"Enter the keywords using , \" defaultValue={this.state.editTokenize} onChange={this.editOnChangeHandler}  />\r\n        </Col>\r\n      </FormGroup>\r\n      \r\n                    </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n        <Button color=\"success\"  onClick={this.submitHandler} >Submit</Button>\r\n          <Button color=\"secondary\" onClick={this.toggleDetailsForm}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n      </div>\r\n\r\n            </Col>\r\n           \r\n          \r\n            \r\n            \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Container,Row,Col,Button, InputGroup, InputGroupAddon, Input,\r\n    Form, FormGroup,Modal,ModalBody,ModalFooter,ModalHeader\r\n} from 'reactstrap'\r\nimport ListOfSpeech from '../listOfSpeech/listofSppech';\r\n\r\nexport default class speech extends Component {\r\n    state={\r\n        toggle:false,\r\n        authorName:null,\r\n        authorSpeech:null,\r\n        authorSpeechTag:null,\r\n        turnButton:false,\r\n        filterVlaueAuthor:null,  //default value for speechDetails\r\n        speechDetails:[\r\n{\r\n    authorName:\"Dilip kumar\",\r\n    authorSpeech:\"Some quick example text to build on the card title and make up the bulk of the card's content.\",\r\n    tokenize:[\"Delhi\",\"Election\"]\r\n},\r\n{\r\n    authorName:\"Mayank\",\r\n    authorSpeech:\"Some quick example text to build on the card title and make up the bulk of the card's content.\",\r\n    tokenize:[\"Mumbai\",\"Highlights\"]\r\n},\r\n{\r\n    authorName:\"Mayank Soni\",\r\n    authorSpeech:\"Some quick example text to build on the card title and make up the bulk of the card's content.\",\r\n    tokenize:[\"Record\",\"Statics\"]\r\n}\r\n        ]\r\n    }\r\n\r\n//searching filter method\r\n   setFilterValueHandler=()=>{\r\n    let filterValue=document.getElementById(\"filterValue\").value;\r\n    const a=this.state.speechDetails.filter((speech)=>{\r\n        return speech.authorName.toLocaleLowerCase() === filterValue.toLocaleLowerCase();\r\n    })\r\n    this.setState({\r\n        speechDetails:a\r\n    })\r\n    \r\n   }\r\n\r\n//toggleAddModelHandler\r\n    toggleDetailsForm=()=>{\r\n        this.setState({toggle:!this.state.toggle})\r\n    }\r\n\r\n//for taking input value with validation\r\n    onChangeHandler=(e)=>{\r\n        this.setState({\r\n                [e.target.name]:e.target.value\r\n        })\r\n        const {authorName,authorSpeech,authorSpeechTag}=this.state;\r\n        if(authorName && authorSpeech && authorSpeechTag)\r\n        {\r\n            this.isButtonDisabled();\r\n        }\r\n    }\r\n\r\n    //submit button disable and enable\r\n    isButtonDisabled()\r\n    {\r\n        const {authorName,authorSpeech,authorSpeechTag}=this.state;\r\n        if(authorName.length>5 && authorSpeech.length>5 && authorSpeechTag.length>1)\r\n        {\r\n            this.setState({\r\n                turnButton:true\r\n            })\r\n        }\r\n    }\r\n\r\n    // clear input box after submitting\r\n    clearInputHandler=()=>{\r\n       \r\n      this.setState({\r\n          authorName:null,\r\n          authorSpeech:null,\r\n          authorSpeechTag:null\r\n      })\r\n\r\n        \r\n    }\r\n\r\n    //submit handler\r\n    submitHandler=(e)=>{\r\n        e.preventDefault();\r\n        const {authorName,authorSpeech,authorSpeechTag}=this.state;\r\n        const tokenize=authorSpeechTag.split(\",\");\r\n\r\n        const data={\r\n            authorName,\r\n            authorSpeech,\r\n            tokenize\r\n        }\r\n     var copySpeechDetails=this.state.speechDetails;\r\n     copySpeechDetails.push(data);\r\n     this.setState({\r\n         speechDetails:copySpeechDetails,\r\n         toggle:!this.state.toggle\r\n     })\r\n  \r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <Container fluid>\r\n                <Row style={{backgroundColor:\"null\",padding:\"45px\"}} >\r\n                    <Col md=\"12\" xs=\"12\" sm=\"12\" style={{padding:\"25px\"}}>\r\n                        <br></br>\r\n                    <InputGroup>\r\n        <Input placeholder=\"Search by author name\" color=\"success\" id=\"filterValue\" bsSize=\"lg\"/>\r\n        <InputGroupAddon addonType=\"append\">\r\n          <Button color=\"success\" onClick={this.setFilterValueHandler}>Search</Button>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n                    </Col>\r\n\r\n\r\n\r\n                    <Col md=\"12\" xs=\"12\" sm=\"12\" style={{padding:\"25px\"}}>\r\n                        <Button onClick={this.toggleDetailsForm} block color=\"danger\" outline><h3>Add New Speech</h3></Button>\r\n                        \r\n                     </Col>\r\n                     <div>\r\n                     <Modal isOpen={this.state.toggle} toggle={this.toggleDetailsForm} >\r\n        <ModalHeader toggle={this.toggleDetailsForm}>Add New Speech</ModalHeader>\r\n        <ModalBody style={{padding:\"25px\",color:\"black\"}}>\r\n        <Form >\r\n      <FormGroup row>\r\n        <Col  style={{padding:\"5px\"}}>\r\n          <Input type=\"text\" name=\"authorName\"  placeholder=\"Enter Author Name\"  onChange={this.onChangeHandler} />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup row>\r\n      <Col  style={{padding:\"5px\"}}>\r\n          <Input type=\"textarea\" name=\"authorSpeech\"  placeholder=\"Enter the text of Speech \"  onChange={this.onChangeHandler} />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup row>\r\n      <Col style={{padding:\"5px\"}}>\r\n          <Input type=\"text\" name=\"authorSpeechTag\"  placeholder=\"Enter the keywords using , \" onChange={this.onChangeHandler} />\r\n        </Col>\r\n      </FormGroup>\r\n      \r\n                    </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n        {this.state.turnButton? <Button color=\"success\"  onClick={this.submitHandler}>Submit</Button>: <Button color=\"success\"  disabled>Submit</Button>}\r\n          <Button color=\"secondary\" onClick={this.toggleDetailsForm}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n      </div>\r\n                   \r\n\r\n                </Row>\r\n                <Row>\r\n                    <ListOfSpeech speechDetail={this.state.speechDetails} filterValue={this.state.filterVlaueAuthor}></ListOfSpeech>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Row,Col,Container} from 'reactstrap'\r\n\r\nimport Speech from '../../container/Speech/speech';\r\nimport  './layout.css';\r\nfunction layout()\r\n{\r\n    return (\r\n<Container fluid>\r\n<Row>\r\n    <Col xs=\"12\" md=\"12\" sm=\"12\" style={{padding:\"0px\"}}>\r\n        <div className=\"headerBanner\">\r\n            <h1>Netaji Speeches</h1>\r\n        </div>\r\n    </Col>\r\n</Row>\r\n<Row>\r\n    <Col xs=\"12\" md=\"12\" sm=\"12\" style={{padding:\"0px\"}}>\r\n        <Speech></Speech>\r\n    </Col>\r\n   \r\n</Row>\r\n</Container>\r\n    );\r\n}\r\nexport default layout;","import React from 'react';\nimport Layout from './component/Layout/layout'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Layout></Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}